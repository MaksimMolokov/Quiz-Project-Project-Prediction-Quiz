---
title: "Project"
author: "Molokov M.V."
date: '15 октября 2017 г '
output: html_document
---
## R Markdown
```{r setup, include=T}
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
library(knitr)
```

```{r download data, include=FALSE}
set.seed(12345)

trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"

training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
```
## INTRODUCTION
Background

Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: 
http://web.archive.org/web/20161224072740/http:/groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).

Data
The training data for this project are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv

The test data are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv

The data for this project come from this source: http://web.archive.org/web/20161224072740/http:/groupware.les.inf.puc-rio.br/har. If you use the document you create for this class for any purpose please cite them as they have been very generous in allowing their data to be used for this kind of assignment.

## Getting and loading the data

```{r step 1}
###загрузка тренировочных данных и результата по указанным в описании ссылкам 
set.seed(12345)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
###исключаем из данных нечисленные значения
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
```

```{r step 2}
###Необходимо разделить полученные данные на 2 части, для проведения теста и тренировки, размер определяет р=0,6
inTrain <- createDataPartition(training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]
###проверим результат разделения, размер выборки:
dim(myTraining); dim(myTesting)
```

## Cleaning data

```{r step 3}
###Необходимо удалить нулевые переменные функцией nearZeroVar 
###из тренировочных данных
nzv <- nearZeroVar(myTraining, saveMetrics=TRUE)
myTraining <- myTraining[,nzv$nzv==FALSE]
###из тестовых данных
nzv<- nearZeroVar(myTesting,saveMetrics=TRUE)
myTesting <- myTesting[,nzv$nzv==FALSE]
```

```{r step 4, echo=FALSE}
### Удаляем первый столбец набора тестовых данных
myTraining <- myTraining[c(-1)]


###Очищенные переменные с более 60% NA
trainingV3 <- myTraining
for(i in 1:length(myTraining)) {
    if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .7) {
        for(j in 1:length(trainingV3)) {
            if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) == 1)  {
                trainingV3 <- trainingV3[ , -j]
            }   
        } 
    }
}

### Возвращаем обратно имя переменной 
myTraining <- trainingV3
rm(trainingV3)

```

```{r step 5, echo=T}
### Преобразование myTesting and testing data sets
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58])  # удаляем столбец classe
myTesting <- myTesting[clean1]         # разрешить только переменные myTesting которое также есть в  myTraining
testing <- testing[clean2]             # азрешить только переменные testing которое также есть в myTraining

dim(myTesting)
```

```{r step 6, echo=F}
### Поручить данные в одном типе
for (i in 1:length(testing) ) {
    for(j in 1:length(myTraining)) {
        if( length( grep(names(myTraining[i]), names(testing)[j]) ) == 1)  {
            class(testing[j]) <- class(myTraining[i])
        }      
    }      
}

### Чтобы получить тот же класс между testing и myTraining 
testing <- rbind(myTraining[2, -58] , testing)
testing <- testing[-1,]
```

## Prediction with Random Forests
```{r step 7}
### Используем модель прогноза "Случайный лес" 
set.seed(12345)
modFitB1 <- randomForest(classe ~ ., data=myTraining)
predictionB1 <- predict(modFitB1, myTesting, type = "class")
cmrf <- confusionMatrix(predictionB1, myTesting$classe)
cmrf

```

```{r step 8}
plot(modFitB1)
```

```{r step 9}
##plot(cmrf$table, col = cmtree$byClass, main = paste("Random Forest Confusion Matrix: Accuracy =", round(cmrf$overall['Accuracy'], 4)))
```

```{r step 10}
### Используем модель прогноза "Generalized Boosted Regression" из лекций GBR
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv",
                           number = 5,
                           repeats = 1)

gbmFit1 <- train(classe ~ ., data=myTraining, method = "gbm",
                 trControl = fitControl,
                 verbose = FALSE)


gbmFinMod1 <- gbmFit1$finalModel

gbmPredTest <- predict(gbmFit1, newdata=myTesting)
gbmAccuracyTest <- confusionMatrix(gbmPredTest, myTesting$classe)
gbmAccuracyTest
```

```{r step 11}
plot(gbmFit1, ylim=c(0.9, 1))
```

```{r step 12}
predictionB2 <- predict(modFitB1, testing, type = "class")
predictionB2
```

```{r step 13, echo=F}
# Запишем тестовый файл для отправки кода
pml_write_files = function(x){
    n = length(x)
    for(i in 1:n){
        filename = paste0("problem_id_",i,".txt")
        write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
    }
}

# pml_write_files(predictionB2)
```



###This report was created using the package "knitr
##Thank you for watching
